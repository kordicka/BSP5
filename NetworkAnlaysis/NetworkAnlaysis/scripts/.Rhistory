dir = '../metacore_export/ppmi/MalesAndFemales/Interaction/SharedGenes/'
# Read the input file
input_file <- paste0(dir,"Interactions.txt")
data <- read.delim(input_file,col.names = c('Network Object "FROM"', 'Effect', 'Network Object "TO"'))
read.delim(input_file)
input_file
dir = '../metacore_export/ppmi/MalesAndFemales/Interaction/SharedGenes/'
# Read the input file
input_file <- paste0(dir,"Interactions.txt")
data <- read.delim(input_file,col.names = c('Network Object "FROM"', 'Effect', 'Network Object "TO"'))
head(date)
head(data)
data <- data[-c(1,2),]
cat('check data: ')
head(data)
# Perform substitutions
data$Effect <- gsub("Unspecified", "--?", data$Effect)
data$Effect <- gsub("Inhibition", "--|", data$Effect)
data$Effect <- gsub("Activation", "-->", data$Effect)
cat('Numer of interaction: ')
table(data$Effect)
head(data)
tail(data)
head(data,40)
data <- data[!(data$Effect == 'Technical'), ]
cat('Numer of interaction: ')
table(data$Effect)
dir = '../metacore_export/ppmi/MalesAndFemales/Interaction/SharedGenes/'
# Read the input file
input_file <- paste0(dir,"Interactions.txt")
data <- read.delim(input_file,col.names = c('Network Object "FROM"', 'Effect', 'Network Object "TO"'))
data <- data[-c(1,2),]
cat('check data: ')
head(data)
# Perform substitutions
data$Effect <- gsub("Unspecified", "--?", data$Effect)
data$Effect <- gsub("Inhibition", "--|", data$Effect)
data$Effect <- gsub("Activation", "-->", data$Effect)
cat('Numer of interaction: ')
table(data$Effect)
data <- data[!(data$Effect == 'Technical'), ]
cat('Numer of interaction: ')
table(data$Effect)
# Check format
gene_pattern <- "^[[:alnum:]]+\\t--(\\||>|\\?)\\t[[:alnum:]]+$"
gene_pattern
valid_rows <- grepl(gene_pattern, data$`Network Object "FROM"`)
valid_rows
valid_rows <- grepl(gene_pattern, data)
valid_rows
head(data)
# Stampa il dataframe risultante
cat('Data after format check: ')
head(data)
# Write the modified data to a new file
output_file <- paste0(dir,"NetworkInteraction_post.txt")
write.table(data, file = output_file, sep = "\t", quote = FALSE, row.names = FALSE,col.names = FALSE)
# Print a message indicating completion
cat("Substitutions completed. Output written to :", output_file, "\n")
# Leggi il file appena scritto
read_data <- read.delim(output_file, col.names = c('Network.Object..FROM.', 'Effect', 'Network.Object..TO.'))
head(read_data)
# Controllo della corretta separazione dei campi nel file appena letto
if (all(colnames(read_data) == colnames(data)) &&
all(read_data$`Network.Object..FROM.` == data$`Network.Object..FROM.`) &&
all(read_data$Effect == data$Effect) &&
all(read_data$`Network.Object..TO.` == data$`Network.Object..TO.`)) {
cat("File read successfully with correct field separation.\n")
} else {
cat("Error: Field separation in the read file does not match.\n")
}
View(read_data)
source("~/Library/CloudStorage/OneDrive-UniversitàdegliStudidiMilano/ppmi/GRN/Differential_Network_Analysis_Zickenrott_etal_2016/NetworkProcessing.R", echo=TRUE)
dir = 'OneDrive/OneDrive - Università degli Studi di Milano/ppmi/GRN/metacore_export/ppmi/MalesAndFemales/Interaction/DifferenceOfDifference/'
# Read the node file
node_file <- paste0(dir,"nodeMap.txt")
node <- read.delim(node_file, header = FALSE)
dir = '../metacore_export/ppmi/MalesAndFemales/Interaction/SharedGenes/nodeMap.txt'
# Read the node file
node_file <- paste0(dir,"nodeMap.txt")
node <- read.delim(node_file, header = FALSE)
head(node)
dir = '../metacore_export/ppmi/MalesAndFemales/Interaction/SharedGenes/nodeMap.txt'
dir = '../metacore_export/ppmi/MalesAndFemales/Interaction/SharedGenes/'
# Read the node file
node_file <- paste0(dir,"nodeMap.txt")
node <- read.delim(node_file, header = FALSE)
head(node)
node <- node[-c(1,2,3),]
head(node)
# Read the geneslist file
hmc_geneslist <- paste0(dir, "hmc_genesList.txt")
hmc <- read.delim(hmc_geneslist, header = FALSE)
# Read the geneslist file
hmc_geneslist <- paste0(dir, "hmc_geneslist.txt")
hmc <- read.delim(hmc_geneslist, header = FALSE)
head(hmc)
# Read the geneslist file
hmc_geneslist <- paste0(dir, "hmc_genelist.txt")
hmc <- read.delim(hmc_geneslist, header = FALSE)
head(hmc)
# Intersect node genes symbols with the gene list
int <- intersect(node$V2, hmc$V1); cat(paste0('Intersection: ', length(int)))
node <- node[node$V2 %in% int,]
# Find duplicates in the V2 column
duplicates <- node[duplicated(node$V2) | duplicated(node$V2, fromLast = TRUE), ]
# Print the duplicates
print(duplicates)
View(node)
# LookUp on genecards most probable associations, discard the others
indices_to_remove <- which(node$V2 == 'IGHV3-20' & node$V1 != 'IGHV3-20')
indices_to_remove <- c(indices_to_remove, which(node$V2 == 'PRSS41' & node$V1 != 'PRSS41'))
# Rimuovere le righe utilizzando gli indici
node <- node[-indices_to_remove, ]
head(node)
length(node$V2) == length(unique(node$V2))
length(node$V2) == length(unique(node$V2))
length(node$V2) == length(unique(node$V2)) == FALSE
(length(node$V2) == length(unique(node$V2)) == FALSE)
isFALSE(length(node$V2) == length(unique(node$V2)))
duplicates <- duplicated(node)
duplicated(node)
# Se ci sono duplicati, modifica i valori per renderli univoci
if (any(duplicates)) {
node$V2[duplicates] <- paste(node$V2[duplicates], seq_along(node$V2[duplicates]), sep = "_")
}
# Ora, controlla di nuovo se ci sono ancora duplicati
duplicates_after <- duplicated(node)
# Stampa il dataframe risultante
cat('Data after handling duplicates: ')
head(your_dataframe)
head(node)
View(node)
dir = '../metacore_export/ppmi/MalesAndFemales/Interaction/SharedGenes/'
# Read the node file
node_file <- paste0(dir,"nodeMap.txt")
node <- read.delim(node_file, header = FALSE)
node <- node[-c(1,2,3),]
head(node)
# Read the geneslist file
hmc_geneslist <- paste0(dir, "hmc_genelist.txt")
hmc <- read.delim(hmc_geneslist, header = FALSE)
head(hmc)
# Intersect node genes symbols with the gene list
int <- intersect(node$V2, hmc$V1); cat(paste0('Intersection: ', length(int)))
node <- node[node$V2 %in% int,]
# Find duplicates in the V2 column
duplicates <- node[duplicated(node$V2) | duplicated(node$V2, fromLast = TRUE), ]
# Print the duplicates
print(duplicates)
# LookUp on genecards most probable associations, discard the others
indices_to_remove <- which(node$V2 == 'IGHV3-20' & node$V1 != 'IGHV3-20')
indices_to_remove <- c(indices_to_remove, which(node$V2 == 'PRSS41' & node$V1 != 'PRSS41'))
# Rimuovere le righe utilizzando gli indici
node <- node[-indices_to_remove, ]
head(node)
# Controlla se ci sono valori duplicati nel dataframe
duplicates <- duplicated(node)
# Se ci sono duplicati, modifica i valori per renderli univoci
if (any(duplicates)) {
node_unq <- node[!duplicated(node), ]
}
# Ora, controlla di nuovo se ci sono ancora duplicati
duplicates_after <- duplicated(node_unq)
duplicates_after
# Stampa il dataframe risultante
cat('Data after handling duplicates: ')
head(node_unq)
View(node)
View(node_unq)
# Salva il nuovo file senza duplicati
output_file <- "nodeMap_post.txt"
write.table(node, file = paste0(dir,output_file), sep = "\t", col.names = FALSE, quote = FALSE, row.names = FALSE)
# Stampa un messaggio di completamento
cat("Duplicati rimossi. Nuovo file senza duplicati salvato in:","\n", paste0(dir,output_file), "\n")
# Salva il nuovo file senza duplicati
output_file <- "nodeMap_post.txt"
write.table(node_unq, file = paste0(dir,output_file), sep = "\t", col.names = FALSE, quote = FALSE, row.names = FALSE)
# Stampa un messaggio di completamento
cat("Duplicati rimossi. Nuovo file senza duplicati salvato in:","\n", paste0(dir,output_file), "\n")
dir = '../metacore_export/ppmi/MalesAndFemales/Interaction/SharedGenes/'
# Read the node file
node_file <- paste0(dir,"nodeMap.txt")
node <- read.delim(node_file, header = FALSE)
node <- node[-c(1,2,3),]
head(node)
# Read the geneslist file
hmc_geneslist <- paste0(dir, "hmc_genelist.txt")
hmc <- read.delim(hmc_geneslist, header = FALSE)
head(hmc)
# Intersect node genes symbols with the gene list
int <- intersect(node$V2, hmc$V1); cat(paste0('Intersection: ', length(int)))
node <- node[node$V2 %in% int,]
# Find duplicates in the V2 column
duplicates <- node[duplicated(node$V2) | duplicated(node$V2, fromLast = TRUE), ]
# Print the duplicates
print(duplicates)
# LookUp on genecards most probable associations, discard the others
indices_to_remove <- which(node$V2 == 'IGHV3-20' & node$V1 != 'IGHV3-20')
indices_to_remove <- c(indices_to_remove, which(node$V2 == 'PRSS41' & node$V1 != 'PRSS41'))
# Rimuovere le righe utilizzando gli indici
node <- node[-indices_to_remove, ]
head(node)
View(node)
# Controlla se ci sono valori duplicati nel dataframe
duplicates <- duplicated(node)
# Se ci sono duplicati, modifica i valori per renderli univoci
if (any(duplicates)) {
node_unq <- node[!duplicated(node), ]
}
# Ora, controlla di nuovo se ci sono ancora duplicati
duplicates_after <- duplicated(node_unq)
# Stampa il dataframe risultante
cat('Data after handling duplicates: ')
head(node_unq)
View(node_unq)
# Salva il nuovo file senza duplicati
output_file <- "nodeMap_post.txt"
write.table(node_unq, file = paste0(dir,output_file), sep = "\t", col.names = FALSE, quote = FALSE, row.names = FALSE)
# Stampa un messaggio di completamento
cat("Duplicati rimossi. Nuovo file senza duplicati salvato in:","\n", paste0(dir,output_file), "\n")
#load libraries
{
library(edgeR)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
library(ggrepel)
library(org.Hs.eg.db)
library(dplyr)
library(AnnotationDbi)
}
# Select directory for outputs
dir <- 'ppmi/results/paper-genes/'
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
#load libraries
{
library(edgeR)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
library(ggrepel)
library(org.Hs.eg.db)
library(dplyr)
library(AnnotationDbi)
}
# Select directory for outputs
dir <- 'ppmi/results/paper-genes/'
# Load the blcounts matrix from the saved file
load(file = "ppmi/data/processed/PD_control_court_blsymbol_paper.Rdata")
# Load the blcounts matrix from the saved file
load(file = "../../../../../../Volumes/lcsb_BDS/Mirco/ppmi/data/processedPD_control_court_blsymbol_paper.Rdata")
# Remove IG genes that are artificially inflating varaince in the results
blcounts_symbol <- blcounts_symbol[!rownames(blcounts_symbol) %in% c("IGHV2-5", "IGLV2-11"), ]
# Load the blcounts matrix from the saved file
load(file = "../../../../../../../../Volumes/lcsb_BDS/Mirco/ppmi/data/processedPD_control_court_blsymbol_paper.Rdata")
# Load the blcounts matrix from the saved file
load(file = "../../../../../../../../Volumes/lcsb_BDS/Mirco/ppmi/data/processedPD_control_court_blsymbol_paper.Rdata")
# Load the blcounts matrix from the saved file
load(file = "../../../../../../../../Volumes/lcsb_BDS/Mirco/ppmi/data/processed/PD_control_court_blsymbol_paper.Rdata")
